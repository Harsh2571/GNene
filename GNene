import React, { useState, useCallback } from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Alert, AlertDescription } from '@/components/ui/alert';
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer
} from 'recharts';

const mockAnalyticsData = [
  { month: 'Jan', accessRequests: 65, monetizationValue: 2.4, privacyScore: 89 },
  { month: 'Feb', accessRequests: 78, monetizationValue: 3.1, privacyScore: 92 },
  { month: 'Mar', accessRequests: 82, monetizationValue: 2.9, privacyScore: 87 },
  { month: 'Apr', accessRequests: 95, monetizationValue: 3.8, privacyScore: 91 },
];

const GenomicSovereigntyMatrix = () => {
  const [activeTab, setActiveTab] = useState('genomic-sovereignty');
  const [selectedDataset, setSelectedDataset] = useState('full-genome');
  const [encryptionLevel, setEncryptionLevel] = useState('quantum-resistant');
  const [accessMatrix, setAccessMatrix] = useState({
    research: { enabled: false, price: 0 },
    clinical: { enabled: false, price: 0 },
    pharmaceutical: { enabled: false, price: 0 }
  });

  const calculateComplexity = useCallback((settings) => {
    const baseComplexity = Object.values(settings).filter(s => s.enabled).length * 25;
    return Math.min(100, baseComplexity + (encryptionLevel === 'quantum-resistant' ? 30 : 15));
  }, [encryptionLevel]);

  const renderComplexityIndicator = (value) => {
    const bars = [];
    for (let i = 0; i < 5; i++) {
      bars.push(
        <div
          key={i}
          className={`h-2 w-4 mx-0.5 rounded ${
            i * 20 < value ? 'bg-blue-500' : 'bg-gray-200'
          }`}
        />
      );
    }
    return <div className="flex items-center">{bars}</div>;
  };

  return (
    <div className="w-full max-w-7xl mx-auto p-6 space-y-6">
      <Card className="border-t-4 border-t-blue-600">
        <CardHeader>
          <div className="flex items-center justify-between">
            <div>
              <CardTitle className="text-2xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
                BiometrIQ Sovereignâ„¢ Advanced Genomic Matrix
              </CardTitle>
              <p className="text-gray-500 mt-2">
                Enterprise-Grade Genomic Data Sovereignty & Monetization Framework
              </p>
            </div>
            <div className="flex items-center space-x-2">
              <div className="text-sm text-right">
                <div className="font-semibold">Security Level</div>
                <div className="text-green-600">Quantum-Secured</div>
              </div>
              {renderComplexityIndicator(calculateComplexity(accessMatrix))}
            </div>
          </div>
        </CardHeader>
      </Card>

      <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
        <TabsList className="grid grid-cols-4">
          <TabsTrigger value="genomic-sovereignty">Genomic Sovereignty</TabsTrigger>
          <TabsTrigger value="access-matrix">Access Matrix</TabsTrigger>
          <TabsTrigger value="monetization">Monetization</TabsTrigger>
          <TabsTrigger value="analytics">Analytics</TabsTrigger>
        </TabsList>

        <TabsContent value="genomic-sovereignty">
          <Card>
            <CardContent className="space-y-4 p-6">
              <div className="grid grid-cols-2 gap-6">
                <div className="space-y-4">
                  <h3 className="font-semibold text-lg">Dataset Configuration</h3>
                  <div>
                    <label className="block text-sm font-medium mb-2">
                      Genomic Dataset Scope
                    </label>
                    <select 
                      className="w-full p-2 border rounded-md"
                      value={selectedDataset}
                      onChange={(e) => setSelectedDataset(e.target.value)}
                    >
                      <option value="full-genome">Complete Genome Sequence</option>
                      <option value="exome">Exome Only</option>
                      <option value="snp-array">SNP Array Data</option>
                      <option value="methylation">Methylation Profile</option>
                    </select>
                  </div>
                  <div>
                    <label className="block text-sm font-medium mb-2">
                      Encryption Protocol
                    </label>
                    <select 
                      className="w-full p-2 border rounded-md"
                      value={encryptionLevel}
                      onChange={(e) => setEncryptionLevel(e.target.value)}
                    >
                      <option value="quantum-resistant">Quantum-Resistant Encryption</option>
                      <option value="homomorphic">Homomorphic Encryption</option>
                      <option value="multi-party">Secure Multi-Party Computation</option>
                    </select>
                  </div>
                </div>
                
                <div className="space-y-4">
                  <h3 className="font-semibold text-lg">Data Sovereignty Settings</h3>
                  <div className="space-y-2">
                    <label className="flex items-center space-x-2">
                      <input type="checkbox" className="form-checkbox" />
                      <span>Enable Zero-Knowledge Proofs</span>
                    </label>
                    <label className="flex items-center space-x-2">
                      <input type="checkbox" className="form-checkbox" />
                      <span>Implement Genetic Redaction</span>
                    </label>
                    <label className="flex items-center space-x-2">
                      <input type="checkbox" className="form-checkbox" />
                      <span>Enable Cross-Border Data Flow</span>
                    </label>
                  </div>
                </div>
              </div>

              <Alert>
                <AlertDescription>
                  Your genomic data is secured using {encryptionLevel} encryption with a complexity score of {calculateComplexity(accessMatrix)}/100
                </AlertDescription>
              </Alert>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="access-matrix">
          <Card>
            <CardContent className="p-6">
              <div className="space-y-6">
                <div className="grid grid-cols-3 gap-4">
                  {Object.entries(accessMatrix).map(([key, value]) => (
                    <div key={key} className="border rounded-lg p-4">
                      <h3 className="font-semibold mb-4 capitalize">{key} Access</h3>
                      <div className="space-y-4">
                        <label className="flex items-center justify-between">
                          <span>Enable Access</span>
                          <input
                            type="checkbox"
                            checked={value.enabled}
                            onChange={(e) => setAccessMatrix(prev => ({
                              ...prev,
                              [key]: { ...prev[key], enabled: e.target.checked }
                            }))}
                          />
                        </label>
                        <div>
                          <label className="block text-sm mb-1">Access Fee (ETH)</label>
                          <Input
                            type="number"
                            value={value.price}
                            onChange={(e) => setAccessMatrix(prev => ({
                              ...prev,
                              [key]: { ...prev[key], price: parseFloat(e.target.value) }
                            }))}
                            step="0.1"
                            min="0"
                          />
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="analytics">
          <Card>
            <CardContent className="p-6">
              <div className="space-y-6">
                <h3 className="font-semibold text-lg">Usage Analytics</h3>
                <div className="h-[300px]">
                  <ResponsiveContainer width="100%" height="100%">
                    <LineChart data={mockAnalyticsData}>
                      <CartesianGrid strokeDasharray="3 3" />
                      <XAxis dataKey="month" />
                      <YAxis yAxisId="left" />
                      <YAxis yAxisId="right" orientation="right" />
                      <Tooltip />
                      <Line 
                        yAxisId="left"
                        type="monotone" 
                        dataKey="accessRequests" 
                        stroke="#8884d8" 
                        name="Access Requests"
                      />
                      <Line 
                        yAxisId="right"
                        type="monotone" 
                        dataKey="monetizationValue" 
                        stroke="#82ca9d" 
                        name="Monetization (ETH)"
                      />
                    </LineChart>
                  </ResponsiveContainer>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="monetization">
          <Card>
            <CardContent className="p-6">
              <div className="grid grid-cols-2 gap-6">
                <div className="space-y-4">
                  <h3 className="font-semibold text-lg">Revenue Streams</h3>
                  <div className="space-y-2">
                    <div className="flex justify-between items-center">
                      <span>Research License Revenue</span>
                      <span className="font-mono">1.45 ETH</span>
                    </div>
                    <div className="flex justify-between items-center">
                      <span>Clinical Usage Fees</span>
                      <span className="font-mono">0.89 ETH</span>
                    </div>
                    <div className="flex justify-between items-center">
                      <span>Pharmaceutical Access</span>
                      <span className="font-mono">2.34 ETH</span>
                    </div>
                  </div>
                </div>
                <div className="space-y-4">
                  <h3 className="font-semibold text-lg">Smart Contract Settings</h3>
                  <div>
                    <label className="block text-sm mb-1">Revenue Split (%)</label>
                    <Input type="number" placeholder="Enter percentage" />
                  </div>
                  <div>
                    <label className="block text-sm mb-1">Minimum Access Period</label>
                    <select className="w-full p-2 border rounded-md">
                      <option>1 Month</option>
                      <option>3 Months</option>
                      <option>6 Months</option>
                      <option>12 Months</option>
                    </select>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default GenomicSovereigntyMatrix;
